import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useMemo } from "react";
import { StyleSheet } from "../shared-types/variants-interface";
export default function AndroidTabMockup(props) {
    var screenWidth = props.screenWidth, _a = props.noRoundedScreen, noRoundedScreen = _a === void 0 ? false : _a, _b = props.isLandscape, isLandscape = _b === void 0 ? false : _b, _c = props.frameColor, frameColor = _c === void 0 ? "#666666" : _c, _d = props.frameOnly, frameOnly = _d === void 0 ? false : _d, _e = props.statusbarColor, statusbarColor = _e === void 0 ? "#CCCCCC" : _e, _f = props.hideStatusBar, hideStatusBar = _f === void 0 ? false : _f, _g = props.navBar, navBar = _g === void 0 ? "swipe" : _g, _h = props.navBarColor, navBarColor = _h === void 0 ? "#CCCCCC" : _h, _j = props.transparentNavBar, transparentNavBar = _j === void 0 ? false : _j, _k = props.hideNavBar, hideNavBar = _k === void 0 ? false : _k;
    return (_jsx("div", __assign({ className: props.className, style: props.containerStlye }, { children: isLandscape ? (
        // eslint-disable-next-line no-use-before-define
        _jsx(AndroidTabLandscape, __assign({ screenWidth: screenWidth, screenRounded: !noRoundedScreen, frameColor: frameColor, frameOnly: frameOnly, statusbarColor: statusbarColor, navigationBar: navBar, navigationBarColor: navBarColor, hideStatusBar: hideStatusBar, transparentNavigationBar: transparentNavBar, hideNavigationBar: hideNavBar }, { children: props.children }))) : (
        // eslint-disable-next-line no-use-before-define
        _jsx(AndroidTabPortrait, __assign({ screenWidth: screenWidth, screenRounded: !noRoundedScreen, frameColor: frameColor, frameOnly: frameOnly, statusbarColor: statusbarColor, navigationBar: navBar, navigationBarColor: navBarColor, hideStatusBar: hideStatusBar, transparentNavigationBar: transparentNavBar, hideNavigationBar: hideNavBar }, { children: props.children }))) })));
}
var getStyles = function (isLandscape, getSizeWithRatio, screenWidth, mHeight, screenRounded, frameColor, statusbarColor, navigationBarColor, frameOnly) {
    var FRAME_WIDTH = getSizeWithRatio(100);
    var HALF_FRAME_WIDTH = Math.floor(FRAME_WIDTH / 2);
    var widthAndFrame = screenWidth + FRAME_WIDTH * 2;
    var heightAndFrame = mHeight + FRAME_WIDTH * 2;
    var frameButtonSize = Math.floor(FRAME_WIDTH * 0.7);
    var frameButtonPosition = (isLandscape ? mHeight : screenWidth) + FRAME_WIDTH + HALF_FRAME_WIDTH;
    var subItemSize = getSizeWithRatio(45);
    var contPaddingRight; // for Portrait
    var contPaddingTop; // for Landscape
    if (frameOnly) {
        contPaddingRight = 0;
        contPaddingTop = 0;
    }
    else if (isLandscape) {
        contPaddingRight = 0;
        contPaddingTop = frameButtonSize - HALF_FRAME_WIDTH + 1;
    }
    else {
        contPaddingRight = frameButtonSize - HALF_FRAME_WIDTH + 1;
        contPaddingTop = 0;
    }
    return StyleSheet.create({
        container: {
            display: "flex",
            position: "relative",
            boxSizing: "content-box",
            width: widthAndFrame,
            height: heightAndFrame,
            paddingTop: contPaddingTop,
            paddingRight: contPaddingRight,
        },
        frame: {
            display: "flex",
            flexDirection: "column",
            position: "relative",
            borderRadius: screenRounded ? getSizeWithRatio(140) : getSizeWithRatio(30),
            borderStyle: "solid",
            borderWidth: FRAME_WIDTH,
            borderColor: frameColor,
            overflow: "hidden",
        },
        screenCont: {
            display: "flex",
            flex: 1,
            overflow: "hidden",
        },
        screen: {
            display: "flex",
            flexDirection: "column",
            position: "relative",
            width: screenWidth,
            height: mHeight,
            backgroundColor: "transparent",
            overflow: "hidden",
        },
        statusbar: {
            display: "flex",
            flexDirection: "column",
            width: "100%",
            height: getSizeWithRatio(50),
            backgroundColor: statusbarColor,
            alignItems: "center",
        },
        navigationSwipe: {
            display: "flex",
            width: "100%",
            height: getSizeWithRatio(60),
            backgroundColor: navigationBarColor,
            alignItems: "center",
            justifyContent: "center",
        },
        navigationSwipeTransparent: {
            display: "flex",
            position: "absolute",
            bottom: 0,
            width: "100%",
            height: getSizeWithRatio(60),
            alignItems: "center",
            justifyContent: "center",
            pointerEvents: "none",
        },
        navigationSwipeBar: {
            backgroundColor: frameColor,
            borderRadius: getSizeWithRatio(100),
            width: getSizeWithRatio(350),
            height: getSizeWithRatio(15),
        },
        navigationBhrCont: {
            display: "flex",
            position: "relative",
            boxSizing: "border-box",
            width: "100%",
            height: getSizeWithRatio(80),
            backgroundColor: navigationBarColor,
            paddingLeft: isLandscape ? (screenWidth / 3) * 2 : screenWidth / 2,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-evenly",
        },
        navigationBhrTransparent: {
            position: "absolute",
            boxSizing: "border-box",
            display: "flex",
            bottom: 0,
            width: "100%",
            height: getSizeWithRatio(80),
            paddingLeft: isLandscape ? (screenWidth / 3) * 2 : screenWidth / 2,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "space-evenly",
            pointerEvents: "none",
        },
        power: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? undefined : getSizeWithRatio(300),
            left: isLandscape ? getSizeWithRatio(300) : frameButtonPosition,
            bottom: isLandscape ? frameButtonPosition : undefined,
            width: isLandscape ? getSizeWithRatio(180) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(180),
            backgroundColor: frameColor,
        },
        volume: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? undefined : getSizeWithRatio(600),
            left: isLandscape ? getSizeWithRatio(600) : frameButtonPosition,
            bottom: isLandscape ? frameButtonPosition : undefined,
            width: isLandscape ? getSizeWithRatio(330) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(330),
            backgroundColor: frameColor,
        },
        triangle: {
            width: 0,
            height: 0,
            borderTopWidth: subItemSize / 2,
            borderTopStyle: "solid",
            borderTopColor: "transparent",
            borderBottomWidth: subItemSize / 2,
            borderBottomStyle: "solid",
            borderBottomColor: "transparent",
            borderRightWidth: subItemSize,
            borderRightStyle: "solid",
            borderRightColor: frameColor,
            opacity: 0.6,
        },
        circle: {
            width: subItemSize,
            height: subItemSize,
            borderRadius: subItemSize,
            backgroundColor: frameColor,
            opacity: 0.6,
        },
        square: {
            width: subItemSize,
            height: subItemSize,
            borderRadius: subItemSize / 10,
            backgroundColor: frameColor,
            opacity: 0.6,
        },
        cameraContainer: {
            position: "absolute",
            display: "flex",
            left: isLandscape ? undefined : screenWidth + FRAME_WIDTH,
            alignItems: "center",
            justifyContent: "center",
            width: isLandscape ? "100%" : FRAME_WIDTH,
            height: isLandscape ? FRAME_WIDTH : "100%",
        },
        camera: {
            width: getSizeWithRatio(40),
            height: getSizeWithRatio(40),
            borderRadius: getSizeWithRatio(40),
            backgroundColor: statusbarColor,
        },
    });
};
function AndroidTabPortrait(props) {
    var screenWidth = props.screenWidth, screenRounded = props.screenRounded, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, navigationBar = props.navigationBar, navigationBarColor = props.navigationBarColor, hideStatusBar = props.hideStatusBar, hideNavigationBar = props.hideNavigationBar, transparentNavigationBar = props.transparentNavigationBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 1600);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 10) * 16);
        return getStyles(false, getSizeWithRatio, screenWidth, mHeight, screenRounded, frameColor, statusbarColor, navigationBarColor, frameOnly);
    }, [screenWidth, screenRounded, frameColor, statusbarColor, navigationBarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsx("div", __assign({ style: styles.frame }, { children: _jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && _jsx("div", { style: styles.statusbar }), _jsx("div", __assign({ style: styles.screenCont }, { children: props.children })), hideNavigationBar === false &&
                            navigationBar === "swipe" &&
                            (transparentNavigationBar ? (_jsx("div", __assign({ style: styles.navigationSwipeTransparent }, { children: _jsx("div", { style: styles.navigationSwipeBar }) }))) : (_jsx("div", __assign({ style: styles.navigationSwipe }, { children: _jsx("div", { style: styles.navigationSwipeBar }) })))), hideNavigationBar === false &&
                            navigationBar === "bhr" &&
                            (transparentNavigationBar ? (_jsxs("div", __assign({ style: styles.navigationBhrTransparent }, { children: [_jsx("div", { style: styles.triangle }), _jsx("div", { style: styles.circle }), _jsx("div", { style: styles.square })] }))) : (_jsxs("div", __assign({ style: styles.navigationBhrCont }, { children: [_jsx("div", { style: styles.triangle }), _jsx("div", { style: styles.circle }), _jsx("div", { style: styles.square })] })))), hideNavigationBar === false &&
                            navigationBar === "rhb" &&
                            (transparentNavigationBar ? (_jsxs("div", __assign({ style: styles.navigationBhrTransparent }, { children: [_jsx("div", { style: styles.square }), _jsx("div", { style: styles.circle }), _jsx("div", { style: styles.triangle })] }))) : (_jsxs("div", __assign({ style: styles.navigationBhrCont }, { children: [_jsx("div", { style: styles.square }), _jsx("div", { style: styles.circle }), _jsx("div", { style: styles.triangle })] }))))] })) })), _jsx("div", __assign({ style: styles.cameraContainer }, { children: _jsx("div", { style: styles.camera }) })), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.volume }), _jsx("div", { style: styles.power })] }))] })));
}
function AndroidTabLandscape(props) {
    var screenWidth = props.screenWidth, screenRounded = props.screenRounded, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, navigationBar = props.navigationBar, navigationBarColor = props.navigationBarColor, hideStatusBar = props.hideStatusBar, hideNavigationBar = props.hideNavigationBar, transparentNavigationBar = props.transparentNavigationBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 2560);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 16) * 10);
        return getStyles(true, getSizeWithRatio, screenWidth, mHeight, screenRounded, frameColor, statusbarColor, navigationBarColor, frameOnly);
    }, [screenWidth, screenRounded, frameColor, statusbarColor, navigationBarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsx("div", __assign({ style: styles.frame }, { children: _jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && _jsx("div", { style: styles.statusbar }), _jsx("div", __assign({ style: styles.screenCont }, { children: props.children })), hideNavigationBar === false &&
                            navigationBar === "swipe" &&
                            (transparentNavigationBar ? (_jsx("div", __assign({ 
                                // pointerEvents="none"
                                style: styles.navigationSwipeTransparent }, { children: _jsx("div", { style: styles.navigationSwipeBar }) }))) : (_jsx("div", __assign({ style: styles.navigationSwipe }, { children: _jsx("div", { style: styles.navigationSwipeBar }) })))), hideNavigationBar === false &&
                            navigationBar === "bhr" &&
                            (transparentNavigationBar ? (_jsxs("div", __assign({ 
                                // pointerEvents="none"
                                style: styles.navigationBhrTransparent }, { children: [_jsx("div", { style: styles.triangle }), _jsx("div", { style: styles.circle }), _jsx("div", { style: styles.square })] }))) : (_jsxs("div", __assign({ style: styles.navigationBhrCont }, { children: [_jsx("div", { style: styles.triangle }), _jsx("div", { style: styles.circle }), _jsx("div", { style: styles.square })] })))), hideNavigationBar === false &&
                            navigationBar === "rhb" &&
                            (transparentNavigationBar ? (_jsxs("div", __assign({ 
                                // pointerEvents="none"
                                style: styles.navigationBhrTransparent }, { children: [_jsx("div", { style: styles.square }), _jsx("div", { style: styles.circle }), _jsx("div", { style: styles.triangle })] }))) : (_jsxs("div", __assign({ style: styles.navigationBhrCont }, { children: [_jsx("div", { style: styles.square }), _jsx("div", { style: styles.circle }), _jsx("div", { style: styles.triangle })] }))))] })) })), _jsx("div", __assign({ style: styles.cameraContainer }, { children: _jsx("div", { style: styles.camera }) })), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.volume }), _jsx("div", { style: styles.power })] }))] })));
}
//# sourceMappingURL=AndroidTabMockup.js.map