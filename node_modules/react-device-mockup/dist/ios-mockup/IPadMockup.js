import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useMemo } from "react";
import { StyleSheet } from "../shared-types/variants-interface";
export default function IPadMockup(props) {
    var screenWidth = props.screenWidth, _a = props.screenType, screenType = _a === void 0 ? "modern" : _a, _b = props.isLandscape, isLandscape = _b === void 0 ? false : _b, _c = props.frameColor, frameColor = _c === void 0 ? "#666666" : _c, _d = props.frameOnly, frameOnly = _d === void 0 ? false : _d, _e = props.statusbarColor, statusbarColor = _e === void 0 ? "#CCCCCC" : _e, _f = props.hideStatusBar, hideStatusBar = _f === void 0 ? false : _f, _g = props.transparentNavBar, transparentNavBar = _g === void 0 ? false : _g, _h = props.hideNavBar, hideNavBar = _h === void 0 ? false : _h;
    var Mockup = useMemo(function () {
        switch (screenType) {
            case "legacy":
                // 무시
                // hideNavigationBar,
                // transparentNavigationBar,
                if (isLandscape) {
                    return IPadLegacyLandscape;
                }
                return IPadLegacyPortrait;
            case "modern":
            default:
                if (isLandscape) {
                    return IPadModernLandscape;
                }
                return IPadModernPortrait;
        }
    }, [isLandscape, screenType]);
    return (_jsx("div", __assign({ className: props.className, style: props.containerStlye }, { children: _jsx(Mockup, __assign({ screenWidth: screenWidth, frameColor: frameColor, frameOnly: frameOnly, statusbarColor: statusbarColor, hideStatusBar: hideStatusBar, transparentNavigationBar: transparentNavBar, hideNavigationBar: hideNavBar }, { children: props.children })) })));
}
var getStyles = function (param) {
    var isLandscape = param.isLandscape, getSizeWithRatio = param.getSizeWithRatio, screenWidth = param.screenWidth, mHeight = param.mHeight, frameColor = param.frameColor, statusbarColor = param.statusbarColor, frameOnly = param.frameOnly;
    var FRAME_WIDTH = getSizeWithRatio(35);
    var HALF_FRAME_WIDTH = Math.floor(FRAME_WIDTH / 2);
    var widthAndFrame = screenWidth + FRAME_WIDTH * 2;
    var heightAndFrame = mHeight + FRAME_WIDTH * 2;
    var bezelRadius = getSizeWithRatio(50);
    var frameButtonSize = Math.floor(FRAME_WIDTH * 0.65);
    var frameButtonPosition = (isLandscape ? mHeight : screenWidth) +
        FRAME_WIDTH +
        HALF_FRAME_WIDTH +
        frameButtonSize -
        HALF_FRAME_WIDTH;
    var pRight; // for Portrait
    var pLeft; // for Landscape
    var pTop; // both
    if (frameOnly) {
        pRight = 0;
        pLeft = 0;
        pTop = 0;
    }
    else {
        pTop = frameButtonSize - Math.floor(HALF_FRAME_WIDTH / 1.5);
        pRight = isLandscape ? 0 : frameButtonSize - Math.floor(HALF_FRAME_WIDTH / 1.5);
        pLeft = isLandscape ? frameButtonSize - Math.floor(HALF_FRAME_WIDTH / 1.5) : 0;
    }
    return StyleSheet.create({
        container: {
            display: "flex",
            flexDirection: "column",
            boxSizing: "content-box",
            position: "relative",
            width: widthAndFrame,
            height: heightAndFrame,
            paddingTop: pTop,
            paddingRight: pRight,
            paddingLeft: pLeft,
        },
        frame: {
            display: "flex",
            flexDirection: "column",
            position: "relative",
            borderRadius: bezelRadius,
            borderStyle: "solid",
            borderWidth: FRAME_WIDTH,
            borderColor: frameColor,
            overflow: "hidden",
        },
        screen: {
            display: "flex",
            flexDirection: "column",
            position: "relative",
            width: screenWidth,
            height: mHeight,
            backgroundColor: "transparent",
            overflow: "hidden",
        },
        notchContainer: {
            display: "flex",
            flexDirection: "column",
            width: "100%",
            height: getSizeWithRatio(24),
            backgroundColor: statusbarColor,
            alignItems: "center",
        },
        swipeContainerFullScreen: {
            display: "flex",
            flexDirection: "column",
            position: "absolute",
            boxSizing: "border-box",
            bottom: 0,
            width: "100%",
            height: getSizeWithRatio(20),
            paddingTop: getSizeWithRatio(4),
            alignItems: "center",
            justifyContent: "center",
            pointerEvents: "none",
        },
        swipeContainer: {
            display: "flex",
            flexDirection: "column",
            boxSizing: "border-box",
            width: "100%",
            height: getSizeWithRatio(20),
            backgroundColor: statusbarColor,
            paddingTop: getSizeWithRatio(4),
            alignItems: "center",
            justifyContent: "center",
        },
        swipeBar: {
            backgroundColor: frameColor,
            borderRadius: getSizeWithRatio(100),
            width: isLandscape ? "25%" : "30%",
            height: getSizeWithRatio(8),
        },
        volumeUp: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? undefined : getSizeWithRatio(75),
            left: isLandscape ? getSizeWithRatio(75) : frameButtonPosition,
            bottom: isLandscape ? frameButtonPosition : undefined,
            width: isLandscape ? getSizeWithRatio(50) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(50),
            backgroundColor: frameColor,
        },
        volumeDown: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? undefined : getSizeWithRatio(130),
            left: isLandscape ? getSizeWithRatio(130) : frameButtonPosition,
            bottom: isLandscape ? frameButtonPosition : undefined,
            width: isLandscape ? getSizeWithRatio(50) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(50),
            backgroundColor: frameColor,
        },
        power: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            bottom: isLandscape
                ? mHeight - FRAME_WIDTH - HALF_FRAME_WIDTH
                : mHeight + FRAME_WIDTH + HALF_FRAME_WIDTH + frameButtonSize - HALF_FRAME_WIDTH,
            left: isLandscape ? undefined : screenWidth - FRAME_WIDTH - HALF_FRAME_WIDTH,
            right: isLandscape
                ? screenWidth + FRAME_WIDTH + HALF_FRAME_WIDTH + frameButtonSize - HALF_FRAME_WIDTH
                : undefined,
            width: isLandscape ? frameButtonSize : getSizeWithRatio(60),
            height: isLandscape ? getSizeWithRatio(60) : frameButtonSize,
            backgroundColor: frameColor,
        },
    });
};
function IPadModernPortrait(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, hideStatusBar = props.hideStatusBar, hideNavigationBar = props.hideNavigationBar, transparentNavigationBar = props.transparentNavigationBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 834);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 3) * 4);
        return getStyles({
            isLandscape: false,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            statusbarColor: statusbarColor,
            frameOnly: frameOnly,
        });
    }, [screenWidth, frameColor, statusbarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsxs("div", __assign({ style: styles.frame }, { children: [_jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && _jsx("div", { style: styles.notchContainer }), _jsx("div", __assign({ style: { display: "flex", flex: 1, overflow: "hidden" } }, { children: props.children })), hideNavigationBar === false && transparentNavigationBar === false && (_jsx("div", __assign({ style: styles.swipeContainer }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), hideNavigationBar === false && transparentNavigationBar && (_jsx("div", __assign({ style: styles.swipeContainerFullScreen }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.volumeUp }), _jsx("div", { style: styles.volumeDown }), _jsx("div", { style: styles.power })] }))] })));
}
function IPadModernLandscape(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, hideStatusBar = props.hideStatusBar, hideNavigationBar = props.hideNavigationBar, transparentNavigationBar = props.transparentNavigationBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 1194);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 4) * 3);
        return getStyles({
            isLandscape: true,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            statusbarColor: statusbarColor,
            frameOnly: frameOnly,
        });
    }, [screenWidth, frameColor, statusbarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsxs("div", __assign({ style: styles.frame }, { children: [_jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && _jsx("div", { style: styles.notchContainer }), _jsx("div", __assign({ style: { display: "flex", flex: 1, overflow: "hidden" } }, { children: props.children })), hideNavigationBar === false && transparentNavigationBar === false && (_jsx("div", __assign({ style: styles.swipeContainer }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), hideNavigationBar === false && transparentNavigationBar && (_jsx("div", __assign({ style: styles.swipeContainerFullScreen }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.volumeUp }), _jsx("div", { style: styles.volumeDown }), _jsx("div", { style: styles.power })] }))] })));
}
var getLegacyStyles = function (param) {
    var isLandscape = param.isLandscape, getSizeWithRatio = param.getSizeWithRatio, screenWidth = param.screenWidth, mHeight = param.mHeight, frameColor = param.frameColor, statusbarColor = param.statusbarColor;
    var FRAME_WIDTH = getSizeWithRatio(35);
    var widthAndFrame = screenWidth + FRAME_WIDTH * 2;
    var heightAndFrame = mHeight + FRAME_WIDTH * 2;
    var upperBezelSize = getSizeWithRatio(90);
    var lowerBezelSize = getSizeWithRatio(90);
    var bezelRadius = getSizeWithRatio(40);
    return StyleSheet.create({
        container: {
            display: "flex",
            flexDirection: isLandscape ? "row" : "column",
            boxSizing: "content-box",
            position: "relative",
            width: isLandscape ? screenWidth + upperBezelSize + lowerBezelSize : widthAndFrame,
            height: isLandscape ? heightAndFrame : mHeight + upperBezelSize + lowerBezelSize,
        },
        frame: {
            display: "flex",
            flexDirection: "column",
            alignItems: isLandscape ? "flex-start" : "center",
            justifyContent: isLandscape ? "center" : "flex-start",
            position: "relative",
            boxSizing: "border-box",
            borderLeftWidth: FRAME_WIDTH,
            borderLeftStyle: "solid",
            borderRightWidth: FRAME_WIDTH,
            borderRightStyle: "solid",
            borderColor: frameColor,
            width: isLandscape ? screenWidth : widthAndFrame,
            height: isLandscape ? heightAndFrame : mHeight,
            overflow: "hidden",
        },
        upperBezel: {
            display: "flex",
            flexDirection: "column",
            position: "relative",
            borderTopLeftRadius: bezelRadius,
            borderTopRightRadius: isLandscape ? 0 : bezelRadius,
            borderBottomLeftRadius: isLandscape ? bezelRadius : 0,
            width: isLandscape ? upperBezelSize : widthAndFrame,
            height: isLandscape ? heightAndFrame : upperBezelSize,
            backgroundColor: frameColor,
            justifyContent: "center",
        },
        camSpeakerCont: {
            display: "flex",
            flexDirection: isLandscape ? "row" : "column",
            position: "relative",
            width: "100%",
            height: "100%",
            alignItems: "center",
            justifyContent: "center",
        },
        camera: {
            width: getSizeWithRatio(20),
            height: getSizeWithRatio(20),
            borderRadius: getSizeWithRatio(20),
            backgroundColor: statusbarColor,
        },
        lowerBezel: {
            display: "flex",
            flexDirection: isLandscape ? "row" : "column",
            borderBottomLeftRadius: isLandscape ? 0 : bezelRadius,
            borderBottomRightRadius: bezelRadius,
            borderTopRightRadius: isLandscape ? bezelRadius : 0,
            width: isLandscape ? lowerBezelSize : widthAndFrame,
            height: isLandscape ? heightAndFrame : lowerBezelSize,
            backgroundColor: frameColor,
            alignItems: "center",
            justifyContent: "center",
        },
        homeButoon: {
            width: getSizeWithRatio(55),
            height: getSizeWithRatio(55),
            backgroundColor: statusbarColor,
            borderRadius: getSizeWithRatio(55),
        },
        screen: {
            display: "flex",
            flexDirection: "column",
            position: "relative",
            width: screenWidth,
            height: mHeight,
            backgroundColor: "transparent",
            overflow: "hidden",
        },
        statusbar: {
            width: "100%",
            height: getSizeWithRatio(20),
            backgroundColor: statusbarColor,
            alignItems: "center",
        },
    });
};
function IPadLegacyPortrait(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, hideStatusBar = props.hideStatusBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 810);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 3) * 4);
        return getLegacyStyles({
            isLandscape: false,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            statusbarColor: statusbarColor,
            frameOnly: frameOnly,
        });
    }, [screenWidth, frameColor, statusbarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsx("div", __assign({ style: styles.upperBezel }, { children: _jsx("div", __assign({ style: styles.camSpeakerCont }, { children: _jsx("div", { style: styles.camera }) })) })), _jsx("div", __assign({ style: styles.frame }, { children: _jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && _jsx("div", { style: styles.statusbar }), _jsx("div", __assign({ style: { display: "flex", flex: 1, overflow: "hidden" } }, { children: props.children }))] })) })), _jsx("div", __assign({ style: styles.lowerBezel }, { children: _jsx("div", { style: styles.homeButoon }) }))] })));
}
function IPadLegacyLandscape(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, hideStatusBar = props.hideStatusBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 1080);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 4) * 3);
        return getLegacyStyles({
            isLandscape: true,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            statusbarColor: statusbarColor,
            frameOnly: frameOnly,
        });
    }, [screenWidth, frameColor, statusbarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsx("div", __assign({ style: styles.upperBezel }, { children: _jsx("div", __assign({ style: styles.camSpeakerCont }, { children: _jsx("div", { style: styles.camera }) })) })), _jsx("div", __assign({ style: styles.frame }, { children: _jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && _jsx("div", { style: styles.statusbar }), _jsx("div", __assign({ style: { display: "flex", flex: 1, overflow: "hidden" } }, { children: props.children }))] })) })), _jsx("div", __assign({ style: styles.lowerBezel }, { children: _jsx("div", { style: styles.homeButoon }) }))] })));
}
//# sourceMappingURL=IPadMockup.js.map