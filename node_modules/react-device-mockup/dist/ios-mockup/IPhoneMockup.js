import { __assign } from "tslib";
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useMemo } from "react";
import { StyleSheet } from "../shared-types/variants-interface";
export default function IPhoneMockup(props) {
    var screenWidth = props.screenWidth, _a = props.screenType, screenType = _a === void 0 ? "island" : _a, _b = props.isLandscape, isLandscape = _b === void 0 ? false : _b, _c = props.frameColor, frameColor = _c === void 0 ? "#666666" : _c, _d = props.frameOnly, frameOnly = _d === void 0 ? false : _d, _e = props.statusbarColor, statusbarColor = _e === void 0 ? "#CCCCCC" : _e, _f = props.hideStatusBar, hideStatusBar = _f === void 0 ? false : _f, _g = props.transparentNavBar, transparentNavBar = _g === void 0 ? false : _g, _h = props.hideNavBar, hideNavBar = _h === void 0 ? false : _h;
    var Mockup = useMemo(function () {
        switch (screenType) {
            case "legacy":
                // 무시
                // hideNavigationBar,
                // transparentNavigationBar,
                if (isLandscape) {
                    // hideStatusBar 무시
                    // eslint-disable-next-line no-use-before-define
                    return IPhoneLegacyLandscape;
                }
                // eslint-disable-next-line no-use-before-define
                return IPhoneLegacyPortrait;
            case "notch":
                if (isLandscape) {
                    // eslint-disable-next-line no-use-before-define
                    return IPhoneNotchLandscape;
                }
                // eslint-disable-next-line no-use-before-define
                return IPhoneNotchPortrait;
            case "island":
            default:
                if (isLandscape) {
                    // eslint-disable-next-line no-use-before-define
                    return IPhoneIslandLandscape;
                }
                // eslint-disable-next-line no-use-before-define
                return IPhoneIslandPortrait;
        }
    }, [isLandscape, screenType]);
    return (_jsx("div", __assign({ className: props.className, style: props.containerStlye }, { children: _jsx(Mockup, __assign({ screenWidth: screenWidth, frameColor: frameColor, frameOnly: frameOnly, statusbarColor: statusbarColor, hideStatusBar: hideStatusBar, transparentNavigationBar: transparentNavBar, hideNavigationBar: hideNavBar }, { children: props.children })) })));
}
var getStyles = function (param) {
    var screenType = param.screenType, isLandscape = param.isLandscape, getSizeWithRatio = param.getSizeWithRatio, screenWidth = param.screenWidth, mHeight = param.mHeight, frameColor = param.frameColor, frameWidth = param.frameWidth, statusbarColor = param.statusbarColor, frameOnly = param.frameOnly, bezelRadius = param.bezelRadius;
    var FRAME_WIDTH = frameWidth;
    var HALF_FRAME_WIDTH = Math.floor(FRAME_WIDTH / 2);
    var widthAndFrame = screenWidth + FRAME_WIDTH * 2;
    var heightAndFrame = mHeight + FRAME_WIDTH * 2;
    var frameButtonSize = Math.floor(FRAME_WIDTH * (isLandscape ? 0.9 : 0.9));
    var frameButtonPosition = (isLandscape ? mHeight : screenWidth) +
        FRAME_WIDTH +
        HALF_FRAME_WIDTH +
        frameButtonSize -
        HALF_FRAME_WIDTH;
    var pRight; // for Portrait
    var pLeft; // for Portrait
    var pTop; // for Landscape
    var pBottom; // for Landscape
    if (frameOnly) {
        pRight = 0;
        pLeft = 0;
        pTop = 0;
        pBottom = 0;
    }
    else {
        pRight = isLandscape ? 0 : frameButtonSize - HALF_FRAME_WIDTH;
        pLeft = isLandscape ? 0 : frameButtonSize - HALF_FRAME_WIDTH;
        pTop = isLandscape ? frameButtonSize - HALF_FRAME_WIDTH : 0;
        pBottom = isLandscape ? frameButtonSize - HALF_FRAME_WIDTH : 0;
    }
    var topInset;
    var leftInset;
    var rightInset;
    var bottomInset;
    var powerPosition;
    switch (screenType) {
        case "notch":
            topInset = isLandscape ? 0 : getSizeWithRatio(44);
            leftInset = isLandscape ? getSizeWithRatio(44) : 0;
            rightInset = isLandscape ? getSizeWithRatio(44) : 0;
            bottomInset = isLandscape ? getSizeWithRatio(21) : getSizeWithRatio(34);
            powerPosition = getSizeWithRatio(250);
            break;
        case "island":
        default:
            topInset = isLandscape ? 0 : getSizeWithRatio(59);
            leftInset = isLandscape ? getSizeWithRatio(59) : 0;
            rightInset = isLandscape ? getSizeWithRatio(59) : 0;
            bottomInset = isLandscape ? getSizeWithRatio(21) : getSizeWithRatio(34);
            powerPosition = getSizeWithRatio(280);
            break;
    }
    return StyleSheet.create({
        container: {
            display: "flex",
            flexDirection: isLandscape ? "row" : "column",
            boxSizing: "content-box",
            position: "relative",
            width: widthAndFrame,
            height: heightAndFrame,
            paddingRight: pRight,
            paddingLeft: pLeft,
            paddingTop: pTop,
            paddingBottom: pBottom,
        },
        frame: {
            display: "flex",
            flexDirection: "column",
            position: "relative",
            boxSizing: "border-box",
            borderRadius: bezelRadius,
            borderStyle: "solid",
            borderWidth: FRAME_WIDTH,
            borderColor: frameColor,
            overflow: "hidden",
        },
        screen: {
            display: "flex",
            flexDirection: isLandscape ? "row" : "column",
            position: "relative",
            width: screenWidth,
            height: mHeight,
            backgroundColor: "transparent",
            overflow: "hidden",
        },
        notchContainer: {
            display: "flex",
            flexDirection: "column",
            width: isLandscape ? leftInset : "100%",
            height: isLandscape ? "100%" : topInset,
            backgroundColor: statusbarColor,
            alignItems: isLandscape ? "flex-start" : "center",
            justifyContent: isLandscape ? "center" : "flex-start",
        },
        notchContainerFullScreen: {
            display: "flex",
            flexDirection: "column",
            position: "absolute",
            width: isLandscape ? leftInset : "100%",
            height: isLandscape ? "100%" : topInset,
            alignItems: isLandscape ? "flex-start" : "center",
            justifyContent: isLandscape ? "center" : "flex-start",
            pointerEvents: "none",
        },
        // landscape only
        safeAreaRight: {
            width: rightInset,
            height: "100%",
            backgroundColor: statusbarColor,
        },
        island: {
            width: isLandscape ? getSizeWithRatio(35) : getSizeWithRatio(128),
            height: isLandscape ? getSizeWithRatio(128) : getSizeWithRatio(35),
            backgroundColor: frameColor,
            borderRadius: getSizeWithRatio(50),
            marginTop: isLandscape ? undefined : getSizeWithRatio(13),
            marginLeft: isLandscape ? getSizeWithRatio(13) : undefined,
        },
        notch: {
            width: isLandscape ? getSizeWithRatio(31) : getSizeWithRatio(160),
            height: isLandscape ? getSizeWithRatio(160) : getSizeWithRatio(31),
            backgroundColor: frameColor,
            borderBottomLeftRadius: isLandscape ? 0 : getSizeWithRatio(20),
            borderBottomRightRadius: getSizeWithRatio(20),
            borderTopRightRadius: isLandscape ? getSizeWithRatio(20) : 0,
        },
        swipeContainer: {
            display: "flex",
            flexDirection: "column",
            width: "100%",
            height: bottomInset,
            backgroundColor: statusbarColor,
            alignItems: "center",
            justifyContent: "flex-end",
        },
        swipeContainerFullScreen: {
            display: "flex",
            flexDirection: "column",
            position: "absolute",
            bottom: 0,
            width: "100%",
            height: bottomInset,
            alignItems: "center",
            justifyContent: "flex-end",
            pointerEvents: "none",
        },
        swipeBar: {
            backgroundColor: frameColor,
            borderRadius: getSizeWithRatio(100),
            width: isLandscape ? getSizeWithRatio(230) : "35%",
            height: getSizeWithRatio(7),
            marginBottom: isLandscape ? getSizeWithRatio(5) : getSizeWithRatio(10),
        },
        silenceSwitch: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? frameButtonPosition : getSizeWithRatio(165),
            left: isLandscape ? getSizeWithRatio(165) : undefined,
            right: isLandscape ? undefined : frameButtonPosition,
            width: isLandscape ? getSizeWithRatio(34) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(34),
            backgroundColor: frameColor,
        },
        volumeUp: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? frameButtonPosition : getSizeWithRatio(230),
            left: isLandscape ? getSizeWithRatio(230) : undefined,
            right: isLandscape ? undefined : frameButtonPosition,
            width: isLandscape ? getSizeWithRatio(65) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(65),
            backgroundColor: frameColor,
        },
        volumeDown: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? frameButtonPosition : getSizeWithRatio(315),
            left: isLandscape ? getSizeWithRatio(315) : undefined,
            right: isLandscape ? undefined : frameButtonPosition,
            width: isLandscape ? getSizeWithRatio(65) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(65),
            backgroundColor: frameColor,
        },
        powerPortrait: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? undefined : powerPosition,
            left: isLandscape ? powerPosition : frameButtonPosition,
            bottom: isLandscape ? frameButtonPosition : undefined,
            width: isLandscape ? getSizeWithRatio(105) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(105),
            backgroundColor: frameColor,
        },
        notchPad: {
            alignSelf: "center",
            position: "absolute",
            top: isLandscape ? undefined : HALF_FRAME_WIDTH,
            left: isLandscape ? HALF_FRAME_WIDTH : undefined,
            width: isLandscape ? getSizeWithRatio(20) : getSizeWithRatio(160),
            height: isLandscape ? getSizeWithRatio(160) : getSizeWithRatio(20),
            backgroundColor: frameColor,
        },
    });
};
function IPhoneIslandPortrait(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, hideStatusBar = props.hideStatusBar, hideNavigationBar = props.hideNavigationBar, transparentNavigationBar = props.transparentNavigationBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 390);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 9) * 19.5);
        return getStyles({
            screenType: "island",
            isLandscape: false,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            frameWidth: getSizeWithRatio(10),
            frameOnly: frameOnly,
            statusbarColor: statusbarColor,
            bezelRadius: getSizeWithRatio(68),
        });
    }, [screenWidth, frameColor, statusbarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsxs("div", __assign({ style: styles.frame }, { children: [_jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && (_jsx("div", __assign({ style: styles.notchContainer }, { children: _jsx("div", { style: styles.island }) }))), _jsx("div", __assign({ style: { display: "flex", flex: 1, overflow: "hidden" } }, { children: props.children })), hideNavigationBar === false && transparentNavigationBar === false && (_jsx("div", __assign({ style: styles.swipeContainer }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), hideStatusBar && (_jsx("div", __assign({ style: styles.notchContainerFullScreen }, { children: _jsx("div", { style: styles.island }) }))), hideNavigationBar === false && transparentNavigationBar && (_jsx("div", __assign({ style: styles.swipeContainerFullScreen }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.silenceSwitch }), _jsx("div", { style: styles.volumeUp }), _jsx("div", { style: styles.volumeDown }), _jsx("div", { style: styles.powerPortrait })] }))] })));
}
function IPhoneIslandLandscape(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, hideStatusBar = props.hideStatusBar, hideNavigationBar = props.hideNavigationBar, transparentNavigationBar = props.transparentNavigationBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 844);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 19.5) * 9);
        return getStyles({
            screenType: "island",
            isLandscape: true,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            frameWidth: getSizeWithRatio(10),
            frameOnly: frameOnly,
            statusbarColor: statusbarColor,
            bezelRadius: getSizeWithRatio(68),
        });
    }, [screenWidth, frameColor, statusbarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsxs("div", __assign({ style: styles.frame }, { children: [_jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && (_jsx("div", __assign({ style: styles.notchContainer }, { children: _jsx("div", { style: styles.island }) }))), _jsxs("div", __assign({ style: { display: "flex", flex: 1, flexDirection: "column" } }, { children: [_jsx("div", __assign({ style: { display: "flex", flex: 1, overflow: "hidden" } }, { children: props.children })), hideNavigationBar === false && transparentNavigationBar === false && (_jsx("div", __assign({ style: styles.swipeContainer }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), hideStatusBar === false && _jsx("div", { style: styles.safeAreaRight })] })), hideStatusBar && (_jsx("div", __assign({ style: styles.notchContainerFullScreen }, { children: _jsx("div", { style: styles.island }) }))), hideNavigationBar === false && transparentNavigationBar && (_jsx("div", __assign({ style: styles.swipeContainerFullScreen }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.silenceSwitch }), _jsx("div", { style: styles.volumeUp }), _jsx("div", { style: styles.volumeDown }), _jsx("div", { style: styles.powerPortrait })] }))] })));
}
function IPhoneNotchPortrait(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, hideStatusBar = props.hideStatusBar, hideNavigationBar = props.hideNavigationBar, transparentNavigationBar = props.transparentNavigationBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 390);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 9) * 19.5);
        return getStyles({
            screenType: "notch",
            isLandscape: false,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            frameWidth: getSizeWithRatio(14),
            frameOnly: frameOnly,
            statusbarColor: statusbarColor,
            bezelRadius: getSizeWithRatio(64),
        });
    }, [screenWidth, frameColor, statusbarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsxs("div", __assign({ style: styles.frame }, { children: [_jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && (_jsx("div", __assign({ style: styles.notchContainer }, { children: _jsx("div", { style: styles.notch }) }))), _jsx("div", __assign({ style: { display: "flex", flex: 1, overflow: "hidden" } }, { children: props.children })), hideNavigationBar === false && transparentNavigationBar === false && (_jsx("div", __assign({ style: styles.swipeContainer }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), hideStatusBar && (_jsx("div", __assign({ style: styles.notchContainerFullScreen }, { children: _jsx("div", { style: styles.notch }) }))), hideNavigationBar === false && transparentNavigationBar && (_jsx("div", __assign({ style: styles.swipeContainerFullScreen }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), _jsx("div", { style: styles.notchPad }), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.silenceSwitch }), _jsx("div", { style: styles.volumeUp }), _jsx("div", { style: styles.volumeDown }), _jsx("div", { style: styles.powerPortrait })] }))] })));
}
function IPhoneNotchLandscape(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, hideStatusBar = props.hideStatusBar, hideNavigationBar = props.hideNavigationBar, transparentNavigationBar = props.transparentNavigationBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 844);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 19.5) * 9);
        return getStyles({
            screenType: "notch",
            isLandscape: true,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            frameWidth: getSizeWithRatio(14),
            frameOnly: frameOnly,
            statusbarColor: statusbarColor,
            bezelRadius: getSizeWithRatio(64),
        });
    }, [screenWidth, frameColor, statusbarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsxs("div", __assign({ style: styles.frame }, { children: [_jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && (_jsx("div", __assign({ style: styles.notchContainer }, { children: _jsx("div", { style: styles.notch }) }))), _jsxs("div", __assign({ style: { display: "flex", flex: 1, flexDirection: "column" } }, { children: [_jsx("div", __assign({ style: {
                                            display: "flex",
                                            flex: 1,
                                            flexDirection: "column",
                                            overflow: "hidden",
                                        } }, { children: props.children })), hideNavigationBar === false && transparentNavigationBar === false && (_jsx("div", __assign({ style: styles.swipeContainer }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), hideStatusBar === false && _jsx("div", { style: styles.safeAreaRight })] })), hideStatusBar && (_jsx("div", __assign({ style: styles.notchContainerFullScreen }, { children: _jsx("div", { style: styles.notch }) }))), hideNavigationBar === false && transparentNavigationBar && (_jsx("div", __assign({ style: styles.swipeContainerFullScreen }, { children: _jsx("div", { style: styles.swipeBar }) })))] })), _jsx("div", { style: styles.notchPad }), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.silenceSwitch }), _jsx("div", { style: styles.volumeUp }), _jsx("div", { style: styles.volumeDown }), _jsx("div", { style: styles.powerPortrait })] }))] })));
}
var getLegacyStyles = function (param) {
    var isLandscape = param.isLandscape, getSizeWithRatio = param.getSizeWithRatio, screenWidth = param.screenWidth, mHeight = param.mHeight, frameColor = param.frameColor, statusbarColor = param.statusbarColor, frameOnly = param.frameOnly;
    var FRAME_WIDTH = getSizeWithRatio(22);
    var HALF_FRAME_WIDTH = Math.floor(FRAME_WIDTH / 2);
    var widthAndFrame = screenWidth + FRAME_WIDTH * 2;
    var heightAndFrame = mHeight + FRAME_WIDTH * 2;
    var upperBezelSize = getSizeWithRatio(110);
    var lowerBezelSize = getSizeWithRatio(110);
    var frameButtonSize = Math.floor(FRAME_WIDTH * 0.8);
    var frameButtonPosition = (isLandscape ? mHeight : screenWidth) +
        FRAME_WIDTH +
        HALF_FRAME_WIDTH +
        frameButtonSize -
        HALF_FRAME_WIDTH;
    var bezelRadius = getSizeWithRatio(60);
    var pRight; // for Portrait
    var pLeft; // for Portrait
    var pTop; // for Landscape
    var pBottom; // for Landscape
    if (frameOnly) {
        pRight = 0;
        pLeft = 0;
        pTop = 0;
        pBottom = 0;
    }
    else {
        pRight = isLandscape ? 0 : frameButtonSize - HALF_FRAME_WIDTH;
        pLeft = isLandscape ? 0 : frameButtonSize - HALF_FRAME_WIDTH;
        pTop = isLandscape ? frameButtonSize - HALF_FRAME_WIDTH : 0;
        pBottom = isLandscape ? frameButtonSize - HALF_FRAME_WIDTH : 0;
    }
    return StyleSheet.create({
        container: {
            display: "flex",
            flexDirection: isLandscape ? "row" : "column",
            boxSizing: "content-box",
            position: "relative",
            width: isLandscape ? screenWidth + upperBezelSize + lowerBezelSize : widthAndFrame,
            height: isLandscape ? heightAndFrame : mHeight + upperBezelSize + lowerBezelSize,
            paddingRight: pRight,
            paddingLeft: pLeft,
            paddingTop: pTop,
            paddingBottom: pBottom,
        },
        frame: {
            display: "flex",
            flexDirection: "column",
            alignItems: isLandscape ? "flex-start" : "center",
            justifyContent: isLandscape ? "center" : "flex-start",
            position: "relative",
            boxSizing: "border-box",
            borderLeftWidth: FRAME_WIDTH,
            borderLeftStyle: "solid",
            borderRightWidth: FRAME_WIDTH,
            borderRightStyle: "solid",
            borderColor: frameColor,
            width: isLandscape ? screenWidth : widthAndFrame,
            height: isLandscape ? heightAndFrame : mHeight,
            overflow: "hidden",
        },
        upperBezel: {
            display: "flex",
            flexDirection: "column",
            position: "relative",
            borderTopLeftRadius: bezelRadius,
            borderTopRightRadius: isLandscape ? 0 : bezelRadius,
            borderBottomLeftRadius: isLandscape ? bezelRadius : 0,
            width: isLandscape ? upperBezelSize : widthAndFrame,
            height: isLandscape ? heightAndFrame : upperBezelSize,
            backgroundColor: frameColor,
            justifyContent: "center",
        },
        camSpeakerCont: {
            display: "flex",
            flexDirection: isLandscape ? "row" : "column",
            position: "relative",
            width: "100%",
            height: "100%",
            alignItems: "center",
            justifyContent: "center",
        },
        camera: {
            position: "absolute",
            left: isLandscape ? undefined : -getSizeWithRatio(38),
            bottom: isLandscape ? -getSizeWithRatio(38) : 0,
            width: getSizeWithRatio(10),
            height: getSizeWithRatio(10),
            borderRadius: getSizeWithRatio(10),
            backgroundColor: statusbarColor,
        },
        speaker: {
            position: "relative",
            width: isLandscape ? getSizeWithRatio(10) : getSizeWithRatio(80),
            height: isLandscape ? getSizeWithRatio(80) : getSizeWithRatio(10),
            backgroundColor: statusbarColor,
            borderRadius: getSizeWithRatio(10),
        },
        lowerBezel: {
            display: "flex",
            flexDirection: isLandscape ? "row" : "column",
            borderTopRightRadius: isLandscape ? bezelRadius : 0,
            borderBottomLeftRadius: isLandscape ? 0 : getSizeWithRatio(60),
            borderBottomRightRadius: getSizeWithRatio(60),
            width: isLandscape ? lowerBezelSize : widthAndFrame,
            height: isLandscape ? heightAndFrame : lowerBezelSize,
            backgroundColor: frameColor,
            alignItems: "center",
            justifyContent: "center",
        },
        homeButoon: {
            width: getSizeWithRatio(65),
            height: getSizeWithRatio(65),
            backgroundColor: statusbarColor,
            borderRadius: getSizeWithRatio(65),
        },
        screen: {
            display: "flex",
            flexDirection: isLandscape ? "row" : "column",
            position: "relative",
            width: screenWidth,
            height: mHeight,
            backgroundColor: "transparent",
        },
        statusbar: {
            width: "100%",
            height: getSizeWithRatio(20),
            backgroundColor: statusbarColor,
            alignItems: "center",
        },
        silenceSwitch: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? frameButtonPosition : getSizeWithRatio(115),
            left: isLandscape ? getSizeWithRatio(115) : undefined,
            right: isLandscape ? undefined : frameButtonPosition,
            width: isLandscape ? getSizeWithRatio(36) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(36),
            backgroundColor: frameColor,
        },
        volumeUp: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? frameButtonPosition : getSizeWithRatio(185),
            left: isLandscape ? getSizeWithRatio(185) : undefined,
            right: frameButtonPosition,
            width: isLandscape ? getSizeWithRatio(70) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(70),
            backgroundColor: frameColor,
        },
        volumeDown: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? frameButtonPosition : getSizeWithRatio(270),
            left: isLandscape ? getSizeWithRatio(270) : undefined,
            right: isLandscape ? undefined : frameButtonPosition,
            width: isLandscape ? getSizeWithRatio(70) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(70),
            backgroundColor: frameColor,
        },
        power: {
            position: "absolute",
            borderRadius: FRAME_WIDTH,
            top: isLandscape ? undefined : getSizeWithRatio(190),
            left: isLandscape ? getSizeWithRatio(190) : frameButtonPosition,
            bottom: isLandscape ? frameButtonPosition : undefined,
            width: isLandscape ? getSizeWithRatio(64) : frameButtonSize,
            height: isLandscape ? frameButtonSize : getSizeWithRatio(64),
            backgroundColor: frameColor,
        },
    });
};
function IPhoneLegacyPortrait(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor, hideStatusBar = props.hideStatusBar;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 375);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 9) * 16);
        return getLegacyStyles({
            isLandscape: false,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            statusbarColor: statusbarColor,
            frameOnly: frameOnly,
        });
    }, [screenWidth, frameColor, statusbarColor, frameOnly]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsx("div", __assign({ style: styles.upperBezel }, { children: _jsx("div", __assign({ style: styles.camSpeakerCont }, { children: _jsx("div", __assign({ style: styles.speaker }, { children: _jsx("div", { style: styles.camera }) })) })) })), _jsx("div", __assign({ style: styles.frame }, { children: _jsxs("div", __assign({ style: styles.screen }, { children: [hideStatusBar === false && _jsx("div", { style: styles.statusbar }), _jsx("div", __assign({ style: { display: "flex", flex: 1, overflow: "hidden" } }, { children: props.children }))] })) })), _jsx("div", __assign({ style: styles.lowerBezel }, { children: _jsx("div", { style: styles.homeButoon }) })), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.silenceSwitch }), _jsx("div", { style: styles.volumeUp }), _jsx("div", { style: styles.volumeDown }), _jsx("div", { style: styles.power })] }))] })));
}
function IPhoneLegacyLandscape(props) {
    var screenWidth = props.screenWidth, frameColor = props.frameColor, frameOnly = props.frameOnly, statusbarColor = props.statusbarColor;
    var styles = useMemo(function () {
        var getSizeWithRatio = function (size) {
            var sizeRatio = Math.floor((screenWidth * size) / 667);
            return Math.max(sizeRatio, 1);
        };
        var mHeight = Math.floor((screenWidth / 16) * 9);
        return getLegacyStyles({
            isLandscape: true,
            getSizeWithRatio: getSizeWithRatio,
            screenWidth: screenWidth,
            mHeight: mHeight,
            frameColor: frameColor,
            statusbarColor: statusbarColor,
            frameOnly: frameOnly,
        });
    }, [screenWidth, frameColor, frameOnly, statusbarColor]);
    return (_jsxs("div", __assign({ style: styles.container }, { children: [_jsx("div", __assign({ style: styles.upperBezel }, { children: _jsx("div", __assign({ style: styles.camSpeakerCont }, { children: _jsx("div", __assign({ style: styles.speaker }, { children: _jsx("div", { style: styles.camera }) })) })) })), _jsx("div", __assign({ style: styles.frame }, { children: _jsx("div", __assign({ style: styles.screen }, { children: _jsx("div", __assign({ style: { display: "flex", flex: 1, overflow: "hidden" } }, { children: props.children })) })) })), _jsx("div", __assign({ style: styles.lowerBezel }, { children: _jsx("div", { style: styles.homeButoon }) })), !frameOnly && (_jsxs(_Fragment, { children: [_jsx("div", { style: styles.silenceSwitch }), _jsx("div", { style: styles.volumeUp }), _jsx("div", { style: styles.volumeDown }), _jsx("div", { style: styles.power })] }))] })));
}
//# sourceMappingURL=IPhoneMockup.js.map